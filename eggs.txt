import pickla
import pickle
f = open('film_tropes_for_media_ordered.pickle', 'rb')
film_tropes_for_media = pickle.load(f)
f.close()
film_j_index = np.zeros(shape=(len(film_tropes_for_media), len(film_tropes_for_media)), dtype=np.float64)
import numpy as np
film_j_index = np.zeros(shape=(len(film_tropes_for_media), len(film_tropes_for_media)), dtype=np.float64)
%paste
def jaccard_index(set1, set2):
        return len(set1.intersection(set2)) / len(set1.union(set2))
%paste
film_j_index
j_values = j_values.tolist()[0]
j_values = np.reshape(film_j_index, (1, 6297 ** 2))
j_values = j_values.tolist()[0]
np.percentile(j_values, 90)
np.percentile(j_values, 91)
np.percentile(j_values, 95)
np.percentile(j_values, 92)
np.percentile(j_values, 93)
np.percentile(j_values, 94)
marked = []
G = nx.Graph()
import networkx as nx
G = nx.Graph()
G.add_nodes_from(film_tropes_for_media.keys())
%paste
G.add_nodes_from(film_tropes_for_media.keys())
%paste
%paste
titles = list(film_tropes_for_media.keys())
def mapping(x):
        try:
                return list(film_tropes_for_media.keys())[int(x)]
        except:
                return x
for t1 in enumerate(film_tropes_for_media.values()):
        for t2 in enumerate(film_tropes_for_media.values()):
                if t1[0] > t2[0]:
                        if film_j_index[t1[0], t2[0]] > 0.01:
                                G.add_edge(titles[t1[0]], titles[t2[0]])
G.is_connected()
nx.is_connected(G)
nx.number_connected_components(G)
nx.strongly_connected_components(G)
nx.weakly_connected_components(G)
nx.connected_components(G)
components = [i for i in nx.connected_components(G)]
len(components)
[len(i.nodes()) for i in components]
components
[len(i) for i in components]
f = open('film_j_index.pickle', 'wb')
pickle.dump(f, film_j_index)
pickle.dump(film_j_index, f)
from scipy.cluster.hierarchy import dendrogram, linkage
from matplotlib import pyplot as plt
%matplotlib
from scipy.cluster.hierarchy import cophenet
from scipy.spatial.distance import pdist
for_cluster = np.zeros(4, 6297 ** 2)
for_cluster = np.zeros((4, 6297 ** 2), dtype=np.float64)
for_cluster
for_cluster = np.zeros((6297 ** 2, 4), dtype=np.float64)
for t1 in enumerate(film_tropes_for_media.values()):
    for t2 in enumerate(film_tropes_for_media.values()):
        for_cluster[t1[0] * 6297 + t2[0]] = np.array([t1[0], t2[0], jaccard_index(t1[1], t2[1]]), 1])
for t1 in enumerate(film_tropes_for_media.values()):
    for t2 in enumerate(film_tropes_for_media.values()):
        for_cluster[t1[0] * 6297 + t2[0]] = np.array([t1[0], t2[0], jaccard_index(t1[1], t2[1]), 1])
%history -f eggs.txt
